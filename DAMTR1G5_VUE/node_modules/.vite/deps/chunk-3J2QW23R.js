import {
  IN_BROWSER,
  refElement
<<<<<<<< HEAD:DAMTR1G5_VUE/node_modules/.vite/deps/chunk-OT4QTALQ.js
} from "./chunk-5F6JKVTV.js";
========
} from "./chunk-BMLYKDJ3.js";
>>>>>>>> origin/session:DAMTR1G5_VUE/node_modules/.vite/deps/chunk-3J2QW23R.js
import {
  onBeforeUnmount,
  readonly,
  ref,
  watch
} from "./chunk-JXYCLHMS.js";

// node_modules/vuetify/lib/composables/resizeObserver.mjs
function useResizeObserver(callback) {
  let box = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "content";
  const resizeRef = ref();
  const contentRect = ref();
  if (IN_BROWSER) {
    const observer = new ResizeObserver((entries) => {
      callback == null ? void 0 : callback(entries, observer);
      if (!entries.length)
        return;
      if (box === "content") {
        contentRect.value = entries[0].contentRect;
      } else {
        contentRect.value = entries[0].target.getBoundingClientRect();
      }
    });
    onBeforeUnmount(() => {
      observer.disconnect();
    });
    watch(resizeRef, (newValue, oldValue) => {
      if (oldValue) {
        observer.unobserve(refElement(oldValue));
        contentRect.value = void 0;
      }
      if (newValue)
        observer.observe(refElement(newValue));
    }, {
      flush: "post"
    });
  }
  return {
    resizeRef,
    contentRect: readonly(contentRect)
  };
}

export {
  useResizeObserver
};
<<<<<<<< HEAD:DAMTR1G5_VUE/node_modules/.vite/deps/chunk-OT4QTALQ.js
//# sourceMappingURL=chunk-OT4QTALQ.js.map
========
//# sourceMappingURL=chunk-3J2QW23R.js.map
>>>>>>>> origin/session:DAMTR1G5_VUE/node_modules/.vite/deps/chunk-3J2QW23R.js
